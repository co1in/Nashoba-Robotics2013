// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


package org.usfirst.frc1768.Nashoba-Robotics2013;

import org.usfirst.frc1768.Nashoba-Robotics2013.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // Another type of button you can create is a DigitalIOButton, which is
    // a button or switch hooked up to the cypress module. These are useful if
    // you want to build a customized operator interface.
    // Button button = new DigitalIOButton(1);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS


	    
        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

        SmartDashboard.putData("Drive Drive Command", new DriveDriveCommand());

        SmartDashboard.putData("Drive Brake Command", new DriveBrakeCommand());

        SmartDashboard.putData("Shooter Idle Command", new ShooterIdleCommand());

        SmartDashboard.putData("Shooter Load Command", new ShooterLoadCommand());

        SmartDashboard.putData("Shooter Stop Command", new ShooterStopCommand());

        SmartDashboard.putData("Track Idle Command", new TrackIdleCommand());

        SmartDashboard.putData("Track Drive Down Until Force Command", new TrackDriveDownUntilForceCommand());

        SmartDashboard.putData("Compressor Start Command", new CompressorStartCommand());

        SmartDashboard.putData("Compressor Stop Command", new CompressorStopCommand());

        SmartDashboard.putData("Tipping Deploy Command", new TippingDeployCommand());

        SmartDashboard.putData("Tipping Undeploy Command", new TippingUndeployCommand());

        SmartDashboard.putData("Tipping Idle Command", new TippingIdleCommand());

        SmartDashboard.putData("Cancel All Command", new CancelAllCommand());

        SmartDashboard.putData("Shoot Four Times Command", new ShootFourTimesCommand());

        SmartDashboard.putData("Compressor Automatic Toggle Command", new CompressorAutomaticToggleCommand());

        SmartDashboard.putData("Track Deploy Brake Command", new TrackDeployBrakeCommand());

        SmartDashboard.putData("Track Undeploy Brake Command", new TrackUndeployBrakeCommand());

        SmartDashboard.putData("Shooter Run Command", new ShooterRunCommand());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

